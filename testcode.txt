
    /**
     * Fixed voice broadcast module function : Combination Voice Array.
     * param serial_number voice serial number list array. 
     */
    // group="Output"
    // blockId=YFSENSORS_getArrayNumber weight=91 blockGap=15
    // block="%serial_number"
    // inlineInputMode=inline
    // export function getArrayNumber(serial_number: Array<number>): void {
    //     let sNumberArray = [];
    //     for (let index = 0; index < serial_number.length; index++) {
    //         sNumberArray[index] = serial_number[index];
    //     } 
    // }

    /**
     * Fixed voice broadcast module function : Continuous Play.
     * @param vbmPin pin. eg: DigitalPin.P2
     * @param serial_number voice serial number list array.
     */
    //% group="Output"
    //% blockId=YFSENSORS_voiceBroadcastModuleFunContPlay weight=92 blockGap=15
    //% block="voice broadcast %vbmPin| continuous play %serial_number"
    //% vbmPin.fieldEditor="gridpicker" vbmPin.fieldOptions.columns=4
    //% inlineInputMode=inline
    export function voiceBroadcastModuleFunContPlay(vbmPin: DigitalPin, serial_number: Array<number>): void {
        let checksum = 0;
        // voiceBroadcastModuleSendDataWithS(vbmPin, YFSENSORS.OTPFixedVoiceFun2.HeadCode); // 头码
        // checksum += YFSENSORS.OTPFixedVoiceFun2.HeadCode;
        // for (let index = 0; index < serial_number.length; index++) {
        //     voiceBroadcastModuleSendData(vbmPin, serial_number[index]); // 语音列表码
        //     checksum += serial_number[index];
        // }
        // voiceBroadcastModuleSendData(vbmPin, YFSENSORS.OTPFixedVoiceFun2.TailCode); // 尾码
        // checksum += YFSENSORS.OTPFixedVoiceFun2.TailCode;
        // voiceBroadcastModuleSendData(vbmPin, (checksum && 0xFF)); // 校验和
    }